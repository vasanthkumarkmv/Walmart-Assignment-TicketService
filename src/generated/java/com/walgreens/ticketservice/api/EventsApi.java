/**
 * NOTE: This class is auto generated by the swagger code generator program (2.2.3).
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */
package com.walgreens.ticketservice.api;

import com.walgreens.ticketservice.vo.EventDetails;
import com.walgreens.ticketservice.vo.EventDetailsExt;
import com.walgreens.ticketservice.vo.KeyInfo;

import io.swagger.annotations.*;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestHeader;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RequestPart;
import org.springframework.web.multipart.MultipartFile;

import java.util.List;
import javax.validation.constraints.*;
import javax.validation.Valid;
@javax.annotation.Generated(value = "io.swagger.codegen.languages.SpringCodegen", date = "2018-01-01T15:23:50.265-06:00")

@Api(value = "events", description = "the events API")
public interface EventsApi {

    @ApiOperation(value = "Add a new event to venue", notes = "This API end point adds a event to venue", response = KeyInfo.class, tags={ "2. Event", })
    @ApiResponses(value = { 
        @ApiResponse(code = 201, message = "Created", response = KeyInfo.class),
        @ApiResponse(code = 405, message = "Invalid input", response = Void.class) })
    
    @RequestMapping(value = "/events",
        produces = { "application/json" }, 
        consumes = { "application/json" },
        method = RequestMethod.POST)
    ResponseEntity<KeyInfo> addEvent(@ApiParam(value = "Event to be added to venue" ,required=true )  @Valid @RequestBody EventDetails eventDetails);


    @ApiOperation(value = "Gets all the events in venue", notes = "This API lists details of all the events in venue", response = EventDetailsExt.class, responseContainer = "List", tags={ "2. Event", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "successful operation", response = EventDetailsExt.class, responseContainer = "List"),
        @ApiResponse(code = 404, message = "Not Found", response = Void.class) })
    
    @RequestMapping(value = "/events/findByVenue",
        produces = { "application/json" }, 
        method = RequestMethod.GET)
    ResponseEntity<List<EventDetailsExt>> fetchAllEventsInVenue( @NotNull@ApiParam(value = "Venue ID", required = true) @RequestParam(value = "venueId", required = true) Integer venueId);


    @ApiOperation(value = "Update event details", notes = "This API end point updates a event details", response = Void.class, tags={ "2. Event", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Updated", response = Void.class),
        @ApiResponse(code = 405, message = "Invalid input", response = Void.class) })
    
    @RequestMapping(value = "/events/{eventId}",
        produces = { "application/json" }, 
        consumes = { "application/json" },
        method = RequestMethod.PUT)
    ResponseEntity<Void> updateEvent(@ApiParam(value = "Event ID",required=true ) @PathVariable("eventId") Integer eventId,@ApiParam(value = "Event details that needs to be updated" ,required=true )  @Valid @RequestBody EventDetails eventDetails);

}
