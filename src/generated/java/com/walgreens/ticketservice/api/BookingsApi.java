/**
 * NOTE: This class is auto generated by the swagger code generator program (2.2.3).
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */
package com.walgreens.ticketservice.api;

import com.walgreens.ticketservice.vo.EventReservationDetails;
import com.walgreens.ticketservice.vo.EventReservationStatus;
import com.walgreens.ticketservice.vo.HoldInfo;

import io.swagger.annotations.*;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestHeader;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RequestPart;
import org.springframework.web.multipart.MultipartFile;

import java.util.List;
import javax.validation.constraints.*;
import javax.validation.Valid;
@javax.annotation.Generated(value = "io.swagger.codegen.languages.SpringCodegen", date = "2018-01-01T15:23:50.265-06:00")

@Api(value = "bookings", description = "the bookings API")
public interface BookingsApi {

    @ApiOperation(value = "Event and Venue details along with seat status, number of unreserved seats", notes = "Event and Venue details along with seat status", response = EventReservationStatus.class, tags={ "3. Tickets", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "successful operation", response = EventReservationStatus.class),
        @ApiResponse(code = 404, message = "Not Found", response = Void.class) })
    
    @RequestMapping(value = "/bookings/findByEvent",
        produces = { "application/json" }, 
        method = RequestMethod.GET)
    ResponseEntity<EventReservationStatus> fetchEventStatus( @NotNull@ApiParam(value = "Event ID", required = true) @RequestParam(value = "eventId", required = true) Integer eventId);


    @ApiOperation(value = "Reserve and commit a specific group of held seats for a customer", notes = "Reserve and commit a specific group of held seats for a customer", response = Void.class, tags={ "3. Tickets", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Success", response = Void.class),
        @ApiResponse(code = 405, message = "Invalid input", response = Void.class) })
    
    @RequestMapping(value = "/bookings/{bookingId}",
        produces = { "application/json" }, 
        consumes = { "application/json" },
        method = RequestMethod.PUT)
    ResponseEntity<Void> finalizeSeats(@ApiParam(value = "Booking ID",required=true ) @PathVariable("bookingId") String bookingId);


    @ApiOperation(value = "Find and hold the best available seats on behalf of a customer", notes = "Find and hold the best available seats on behalf of a customer", response = HoldInfo.class, tags={ "3. Tickets", })
    @ApiResponses(value = { 
        @ApiResponse(code = 201, message = "Created", response = HoldInfo.class),
        @ApiResponse(code = 405, message = "Invalid input", response = Void.class) })
    
    @RequestMapping(value = "/bookings",
        produces = { "application/json" }, 
        consumes = { "application/json" },
        method = RequestMethod.POST)
    ResponseEntity<HoldInfo> holdSeats(@ApiParam(value = "seat reservation details" ,required=true )  @Valid @RequestBody EventReservationDetails seatReservationDetails);

}
